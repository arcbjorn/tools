#!/bin/bash

# Script to configure ast-grep as a comprehensive tool for Claude Code
set -e

INTERACTIVE=true

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --non-interactive)
            INTERACTIVE=false
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --non-interactive   Run without prompts"
            echo "  --help, -h          Show this help message"
            echo ""
            echo "This script configures ast-grep as a comprehensive tool:"
            echo "  - Creates ast-grep wrapper with full capabilities"
            echo "  - Adds comprehensive documentation to Claude memory"
            echo "  - Makes ast-grep available with search, analyze, replace functions"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo "Configure ast-grep Tool for Claude Code"
echo "======================================"

# Check if ast-grep is available
if ! command -v ast-grep >/dev/null 2>&1; then
    echo "Error: ast-grep is not installed"
    echo "Install with: pacman -S ast-grep"
    exit 1
fi

MEMORY_PATH="$HOME/.claude/AST_GREP.md"

# Show what will happen (interactive mode only)
if [ "$INTERACTIVE" = true ]; then
    echo ""
    echo "This will:"
    echo "  1. Add comprehensive ast-grep documentation to Claude memory"
    echo "  2. Enable Claude to use ast-grep directly for search, analysis, and refactoring"
    echo ""
    
    read -p "Proceed? (Y/n): " confirm
    
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Aborted."
        exit 1
    fi
fi

echo ""
echo "Adding ast-grep documentation to Claude memory..."

# Create memory documentation
mkdir -p "$(dirname "$MEMORY_PATH")"
cat > "$MEMORY_PATH" << 'EOF'
# AST-Grep Documentation for Claude Code

## Overview
ast-grep is a powerful AST-based code search and transformation tool. Unlike text-based search, it understands code structure and can perform semantic searches, linting, and refactoring across multiple programming languages.

## Core Commands

### 1. ast-grep run (Default Command)
Primary command for pattern matching and code rewriting:
```bash
# Basic pattern search
ast-grep -p 'function $name($$$args) { $$$ }' -l javascript

# Search and replace in one command
ast-grep -p 'var $v = $val' -r 'let $v = $val' -l javascript

# JSON output for programmatic use
ast-grep -p 'console.log($$$)' -l javascript --json

# Interactive editing session
ast-grep -p 'function $name() { $$$ }' -l javascript --interactive
```

### 2. ast-grep scan 
Rule-based scanning for linting and bulk transformations:
```bash
# Scan with project configuration
ast-grep scan

# Scan with specific rule file
ast-grep scan -r rules/no-console.yml

# Filter rules by pattern
ast-grep scan --filter "no-console.*"

# Interactive bulk editing
ast-grep scan --interactive
```

### 3. ast-grep test
Test your ast-grep rules:
```bash
# Run all tests
ast-grep test

# Test specific config
ast-grep test -c sgconfig.yml

# Update test snapshots
ast-grep test -U
```

### 4. ast-grep new
Scaffold new projects and rules:
```bash
# Create new ast-grep project
ast-grep new project my-rules

# Create new rule
ast-grep new rule no-var

# Create test file
ast-grep new test no-var-test
```

## Pattern Syntax

### Pattern Variables
- `$VAR` - matches any single AST node and captures it
- `$$$` - matches zero or more AST nodes (ellipsis)
- `$$VAR` - matches multiple nodes and captures them as array
- `$_` - matches single node without capturing (anonymous)

### Advanced Pattern Examples

#### JavaScript/TypeScript
```bash
# Function declarations with parameters
ast-grep -p 'function $name($$$params) { $$$ }' -l javascript

# Arrow functions
ast-grep -p '($$$params) => $body' -l javascript

# Class methods with specific patterns
ast-grep -p 'class $class { $method($$$args) { $$$ } }' -l typescript

# Import statements
ast-grep -p 'import $name from "$module"' -l javascript

# Async/await patterns
ast-grep -p 'await $expr' -l javascript

# Try-catch blocks
ast-grep -p 'try { $$$ } catch ($error) { $$$ }' -l javascript
```

#### Python
```bash
# Function definitions
ast-grep -p 'def $name($$$params): $$$' -l python

# Class definitions with inheritance
ast-grep -p 'class $name($base): $$$' -l python

# List comprehensions
ast-grep -p '[$item for $item in $iterable]' -l python

# With statements
ast-grep -p 'with $expr as $var: $$$' -l python
```

#### Go
```bash
# Function definitions
ast-grep -p 'func $name($$$params) $return { $$$ }' -l go

# Struct definitions
ast-grep -p 'type $name struct { $$$ }' -l go

# Interface definitions  
ast-grep -p 'type $name interface { $$$ }' -l go

# Error handling
ast-grep -p 'if err != nil { $$$ }' -l go
```

## Rule-Based Configuration

### Creating YAML Rules
Create `sgconfig.yml` in project root:
```yaml
ruleDirs:
  - rules

languageGlobs:
  html: ['*.vue', '*.svelte']
  json: ['.eslintrc']
```

### Example Rule File (`rules/no-console.yml`)
```yaml
id: no-console-log
language: JavaScript
rule:
  pattern: console.log($$$ARGS)
severity: error
message: "Remove console.log statements before production"
note: "Use proper logging instead"
fix: ""  # Remove the statement

---
id: use-const
language: JavaScript  
rule:
  pattern: let $VAR = $VAL
  inside:
    not:
      pattern: |
        {
          $VAR = $$$
        }
fix: const $VAR = $VAL
message: "Use const for variables that are never reassigned"
```

### Advanced Rule Types

#### Atomic Rules
```yaml
# Pattern matching
rule:
  pattern: console.log($$$)

# Node kind matching
rule:
  kind: function_declaration

# Regex matching
rule:
  regex: "^test.*"

# Position matching  
rule:
  nthChild: 0  # First child
```

#### Relational Rules
```yaml
# Inside specific context
rule:
  pattern: $VAR
  inside:
    pattern: function $name() { $$$ }

# Has specific child
rule:
  pattern: function $name() { $$$ }
  has:
    pattern: return $val

# Sequential relationships
rule:
  pattern: $stmt1
  precedes:
    pattern: $stmt2
```

#### Composite Rules  
```yaml
# All conditions must match
rule:
  all:
    - pattern: let $var = $val
    - inside:
        pattern: function() { $$$ }

# Any condition matches
rule:
  any:
    - pattern: var $var
    - pattern: let $var

# Negation
rule:
  not:
    pattern: const $var
```

## Advanced Usage Patterns

### 1. Large-scale Refactoring
```bash
# Convert all var to let/const across project
ast-grep -p 'var $v = $val' -r 'const $v = $val' -l javascript src/

# Modernize function syntax
ast-grep -p 'function($$$args) { return $expr }' -r '($$$args) => $expr' -l javascript --interactive
```

### 2. Code Analysis  
```bash
# Find all TODO comments (works with any language)
ast-grep -p '// TODO: $$$' -l javascript --json

# Find unused imports (with context rules)
ast-grep scan -r rules/unused-imports.yml

# Detect anti-patterns
ast-grep scan --filter "anti-pattern.*"
```

### 3. Migration Scripts
```bash
# API migration
ast-grep -p '$obj.oldMethod($$$args)' -r '$obj.newMethod($$$args)' -l typescript

# Update deprecated syntax
ast-grep scan -r rules/migration-v2.yml --interactive
```

## Integration with Claude Code

### When to Use ast-grep vs grep
- **Use ast-grep for:**
  - Finding function/class definitions
  - Code refactoring and transformations  
  - Structural pattern matching
  - Language-specific searches
  - Complex code analysis

- **Use grep/ripgrep for:**
  - Simple text searches
  - Log analysis
  - Documentation searches
  - Cross-language string searches

### Recommended Workflow
1. **Explore**: Use `ast-grep -p 'pattern' --json` to understand matches
2. **Validate**: Test patterns on small samples first  
3. **Transform**: Use `--interactive` flag for safe bulk edits
4. **Automate**: Create YAML rules for repeated operations
5. **Test**: Use `ast-grep test` to validate rule behavior

## Supported Languages
- JavaScript, TypeScript, JSX, TSX
- Python  
- Go
- Rust
- Java, Kotlin
- C, C++
- C#
- PHP
- Ruby
- HTML, CSS
- And 20+ more languages

## Best Practices

### Pattern Design
1. Start simple, add complexity gradually
2. Use `$$$` for flexible content matching
3. Test patterns with `--json` to see exact matches
4. Use meaningful variable names in patterns

### Performance
1. Specify language with `-l` for better performance
2. Use file globs to limit search scope
3. Use `--threads` to control parallelism
4. Consider `--no-ignore` carefully (respects .gitignore by default)

### Safety
1. Always test transformations on a subset first
2. Use version control before bulk changes
3. Use `--interactive` mode for review
4. Create test cases for custom rules

This comprehensive documentation enables Claude Code to use ast-grep to its full potential for semantic code search, analysis, and transformation.
EOF

echo "✓ Created ast-grep documentation: $MEMORY_PATH"

echo ""
echo "ast-grep documentation configured successfully!"
echo ""
echo "Claude Code now has access to:"
echo "  • Comprehensive ast-grep documentation in global memory"
echo "  • Knowledge of all ast-grep commands and capabilities"
echo "  • Pattern syntax and advanced usage examples"
echo ""
echo "Claude can now use ast-grep directly for:"
echo "  - Structural code searches with ast-grep -p 'pattern' -l language"
echo "  - Code analysis and transformations with ast-grep scan"
echo "  - Safe code refactoring with --interactive mode"
echo "  - YAML rule-based code analysis"
echo ""
echo "Documentation is available immediately - no restart needed!"