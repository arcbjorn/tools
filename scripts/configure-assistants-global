#!/bin/bash

# Script to configure global assistant settings
set -e

INTERACTIVE=true

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --non-interactive)
            INTERACTIVE=false
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --non-interactive   Run without prompts"
            echo "  --help, -h          Show this help message"
            echo ""
            echo "This script configures global assistant settings:"
            echo "  - Sets Claude includeCoAuthoredBy: false"
            echo "  - Creates/updates ~/.claude/CLAUDE.md with tool preferences"
            echo "  - Creates/updates ~/.codex/AGENTS.md with tool preferences"
            echo "  - Creates/updates ~/.gemini/GEMINI.md with tool preferences"
            echo ""
            echo "Documentation for global memory files:"
            echo "  Claude:  https://docs.anthropic.com/en/docs/claude-code/memory#determine-memory-type"
            echo "  Codex:   https://github.com/openai/codex/blob/main/docs/getting-started.md#memory-with-agentsmd"
            echo "  Gemini:  https://github.com/google-gemini/gemini-cli/blob/main/docs/cli/configuration.md#example-context-file-content-eg-geminimd"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo "Configure Global Assistant Settings"
echo "===================================="

# Check required commands
echo "Checking required commands..."
MISSING_COMMANDS=()

if ! command -v claude >/dev/null 2>&1; then
    MISSING_COMMANDS+=("claude")
fi

if ! command -v codex >/dev/null 2>&1; then
    MISSING_COMMANDS+=("codex")
fi

if ! command -v gemini >/dev/null 2>&1; then
    MISSING_COMMANDS+=("gemini")
fi

if ! command -v ast-grep >/dev/null 2>&1; then
    MISSING_COMMANDS+=("ast-grep")
fi

if [ ${#MISSING_COMMANDS[@]} -ne 0 ]; then
    echo "Error: Missing required commands: ${MISSING_COMMANDS[*]}"
    echo "Please install them before running this script"
    exit 1
fi

# Determine config directories
CLAUDE_CONFIG_DIR="$HOME/.claude"
CLAUDE_CONFIG_FILE="$CLAUDE_CONFIG_DIR/settings.json"
CODEX_CONFIG_DIR="$HOME/.codex"
GEMINI_CONFIG_DIR="$HOME/.gemini"

# Create config directory if it doesn't exist
if [ ! -d "$CLAUDE_CONFIG_DIR" ]; then
    echo "Creating Claude config directory: $CLAUDE_CONFIG_DIR"
    mkdir -p "$CLAUDE_CONFIG_DIR"
fi

# Check if config file exists and read current settings
if [ -f "$CLAUDE_CONFIG_FILE" ]; then
    echo "Found existing config file: $CLAUDE_CONFIG_FILE"
    
    # Check if includeCoAuthoredBy is already set to false
    if command -v jq >/dev/null 2>&1; then
        CURRENT_VALUE=$(jq -r '.includeCoAuthoredBy // empty' "$CLAUDE_CONFIG_FILE" 2>/dev/null || echo "")
        if [ "$CURRENT_VALUE" = "false" ]; then
            echo "includeCoAuthoredBy is already set to false"
            if [ "$INTERACTIVE" = true ]; then
                read -p "Continue anyway? (y/N): " confirm
                if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
                    echo "Aborted."
                    exit 0
                fi
            else
                echo "No changes needed."
                exit 0
            fi
        fi
    fi
else
    echo "Creating new config file: $CLAUDE_CONFIG_FILE"
fi

# Confirm before proceeding (interactive mode only)
if [ "$INTERACTIVE" = true ]; then
    echo ""
    echo "This will:"
    echo "  1. Set includeCoAuthoredBy: false in Claude config"
    echo "  2. Create/update ~/.claude/CLAUDE.md with tool preferences"
    echo "  3. Create/update ~/.codex/AGENTS.md with tool preferences"
    echo "  4. Create/update ~/.gemini/GEMINI.md with tool preferences"
    echo ""
    read -p "Proceed? (Y/n): " confirm
    
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Aborted."
        exit 1
    fi
fi

echo ""
echo "Configuring global assistant settings..."

# Directories should already exist - just verify
if [ ! -d "$CLAUDE_CONFIG_DIR" ]; then
    echo "Error: $CLAUDE_CONFIG_DIR directory not found. Please ensure claude is properly installed."
    exit 1
fi

if [ ! -d "$CODEX_CONFIG_DIR" ]; then
    echo "Error: $CODEX_CONFIG_DIR directory not found. Please ensure codex is properly installed."
    exit 1
fi

if [ ! -d "$GEMINI_CONFIG_DIR" ]; then
    echo "Error: $GEMINI_CONFIG_DIR directory not found. Please ensure gemini is properly installed."
    exit 1
fi

# Create/update global CLAUDE.md
CLAUDE_MD_PATH="$HOME/.claude/CLAUDE.md"
ASSISTANTS_DIR="/home/arc/tools/assistants"
echo "Creating/updating global CLAUDE.md..."

cat "$ASSISTANTS_DIR/common/global_instructions.md" > "$CLAUDE_MD_PATH"
if [ -s "$ASSISTANTS_DIR/claude/global_instructions.md" ]; then
    echo "" >> "$CLAUDE_MD_PATH"
    cat "$ASSISTANTS_DIR/claude/global_instructions.md" >> "$CLAUDE_MD_PATH"
fi

# Create/update global AGENTS.md for Codex
CODEX_MD_PATH="$HOME/.codex/AGENTS.md"
echo "Creating/updating global AGENTS.md..."

cat "$ASSISTANTS_DIR/common/global_instructions.md" > "$CODEX_MD_PATH"
if [ -s "$ASSISTANTS_DIR/codex/global_instructions.md" ]; then
    echo "" >> "$CODEX_MD_PATH"
    cat "$ASSISTANTS_DIR/codex/global_instructions.md" >> "$CODEX_MD_PATH"
fi

# Create/update global GEMINI.md for Gemini
GEMINI_MD_PATH="$HOME/.gemini/GEMINI.md"
echo "Creating/updating global GEMINI.md..."

cat "$ASSISTANTS_DIR/common/global_instructions.md" > "$GEMINI_MD_PATH"
if [ -s "$ASSISTANTS_DIR/gemini/global_instructions.md" ]; then
    echo "" >> "$GEMINI_MD_PATH"
    cat "$ASSISTANTS_DIR/gemini/global_instructions.md" >> "$GEMINI_MD_PATH"
fi

# Create or update the config file
if command -v jq >/dev/null 2>&1; then
    # Use jq if available for proper JSON handling
    if [ -f "$CLAUDE_CONFIG_FILE" ]; then
        # Update existing file
        jq '.includeCoAuthoredBy = false' "$CLAUDE_CONFIG_FILE" > "${CLAUDE_CONFIG_FILE}.tmp" && \
        mv "${CLAUDE_CONFIG_FILE}.tmp" "$CLAUDE_CONFIG_FILE"
    else
        # Create new file
        echo '{"includeCoAuthoredBy": false}' | jq . > "$CLAUDE_CONFIG_FILE"
    fi
else
    # Fallback: create simple JSON without jq
    if [ -f "$CLAUDE_CONFIG_FILE" ]; then
        echo "Warning: jq not found. Creating backup and overwriting config file."
        cp "$CLAUDE_CONFIG_FILE" "${CLAUDE_CONFIG_FILE}.backup"
    fi
    echo '{"includeCoAuthoredBy": false}' > "$CLAUDE_CONFIG_FILE"
fi

echo "âœ“ Created/updated global CLAUDE.md: $CLAUDE_MD_PATH"
echo "âœ“ Created/updated global AGENTS.md: $CODEX_MD_PATH"
echo "âœ“ Created/updated global GEMINI.md: $GEMINI_MD_PATH"

echo ""
echo "Global assistant settings configured successfully!"
echo "Claude config file: $CLAUDE_CONFIG_FILE"
echo "Claude memory file: $CLAUDE_MD_PATH"
echo "Codex memory file: $CODEX_MD_PATH"
echo "Gemini memory file: $GEMINI_MD_PATH"

# Display the current settings
if command -v jq >/dev/null 2>&1; then
    echo ""
    echo "Current settings:"
    jq . "$CLAUDE_CONFIG_FILE"
else
    echo ""
    echo "Current settings:"
    cat "$CLAUDE_CONFIG_FILE"
fi

echo ""
echo "ðŸ“š Documentation for global memory files:"
echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
echo "Claude:  https://docs.anthropic.com/en/docs/claude-code/memory#determine-memory-type"
echo "Codex:   https://github.com/openai/codex/blob/main/docs/getting-started.md#memory-with-agentsmd"
echo "Gemini:  https://github.com/google-gemini/gemini-cli/blob/main/docs/cli/configuration.md#example-context-file-content-eg-geminimd"