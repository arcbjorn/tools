#!/bin/bash

# Tools launcher - Interactive tool selector using gum
set -e

# Directories
TOOLS_DIR="/home/arc/tools"
BIN_DIR="$TOOLS_DIR/bin"
SCRIPTS_DIR="$TOOLS_DIR/scripts"

# Check if gum is available
if ! command -v gum >/dev/null 2>&1; then
    echo "Error: gum is required but not installed"
    echo "Install with: pacman -S gum"
    exit 1
fi

# Theme-aware colors using terminal palette slots (matching manage.sh)
readonly RED='\033[38;5;1m'
readonly GREEN='\033[38;5;2m'
readonly YELLOW='\033[38;5;3m'
readonly BLUE='\033[38;5;4m'
readonly MAGENTA='\033[38;5;5m'
readonly CYAN='\033[38;5;6m'
readonly WHITE='\033[38;5;7m'
readonly NC='\033[0m'

# Get concise, informative descriptions
get_description() {
    local file="$1"
    local basename=$(basename "$file")
    
    case "$basename" in
        # Assistant configuration
        sync-assistants-configs-to-global) echo "Deploy configs, commands, agents for Claude, Codex, Gemini, OpenCode" ;;
        clean-global-assistants-configs) echo "Remove global assistant configuration files" ;;
        configure-cc-glm) echo "Configure Claude GLM integration" ;;
        create-assistant-command) echo "Create new assistant command/prompt/agent templates" ;;
        sync-assistant-commands) echo "Sync assistant commands and agents to global directories" ;;
        save-current-claude-plugins) echo "Save Claude plugins (commands+agents) to repository" ;;
        
        # Repository management
        attach-existing-repo) echo "Attach existing project directory to new remote repository" ;;
        init-new-repo) echo "Create new repository with full configuration" ;;
        
        # Tools management
        set-permissions) echo "Make scripts and binaries executable" ;;
        sync-submodules) echo "Update all git submodules to latest versions" ;;
        build) echo "Compile tools from sources directory" ;;
        init-tools) echo "Complete setup: build, configure, permissions" ;;
        configure-shell) echo "Setup shell to source tools configuration" ;;
        init-new-tool) echo "Initialize new tool repository as submodule" ;;
        
        # Git tools
        git-status-overview) echo "System-wide git repository status overview with priority sorting" ;;
        github-stats) echo "Display GitHub repository statistics and metrics" ;;
        
        # Default for unknown tools
        *) echo "$(basename "$file")" ;;
    esac
}

# Build menu data
build_menu_data() {
    local commands=()
    local names=()
    local descriptions=()
    local counter=1
    
    # Add executables from bin/
    if [[ -d "$BIN_DIR" ]]; then
        for file in "$BIN_DIR"/*; do
            if [[ -f "$file" && -x "$file" ]]; then
                local basename=$(basename "$file")
                local description=$(get_description "$file")
                commands+=("$file")
                names+=("$basename")
                descriptions+=("$description")
                ((counter++))
            fi
        done
    fi
    
    # Add scripts
    if [[ -d "$SCRIPTS_DIR" ]]; then
        for file in "$SCRIPTS_DIR"/*; do
            if [[ -f "$file" && -x "$file" ]]; then
                local basename=$(basename "$file")
                # Skip this script itself
                if [[ "$basename" != "tools" ]]; then
                    local description=$(get_description "$file")
                    commands+=("$file")
                    names+=("$basename")
                    descriptions+=("$description")
                    ((counter++))
                fi
            fi
        done
    fi
    
    # Store arrays in global variables
    MENU_COMMANDS=("${commands[@]}")
    MENU_NAMES=("${names[@]}")
    MENU_DESCRIPTIONS=("${descriptions[@]}")
    TOTAL_ITEMS=${#commands[@]}
}


# Display the menu with categories
display_menu() {
    clear
    echo -e "${CYAN}╭─────────────────────────────────────╮${NC}"
    echo -e "${CYAN}│${NC}           ${MAGENTA}Tools Launcher${NC}            ${CYAN}│${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────╯${NC}"
    echo
    
    # Show main categories with icons and spacing
    echo -e "${YELLOW}1)${NC}  🤖  ${GREEN}Assistant Configuration${NC}"
    echo
    echo -e "${YELLOW}2)${NC}  📦  ${GREEN}Git & Repository${NC}"
    echo
    echo -e "${YELLOW}3)${NC}  🔧  ${GREEN}Tools Management${NC}"
    echo
    echo -e "${YELLOW}4)${NC}  🔍  ${GREEN}View All Tools${NC}"
    echo
    echo
    echo -e "${WHITE}Press ESC to quit${NC}"
    echo
}

# Show tools management submenu - launches manage.sh
show_tools_management() {
    clear
    echo -e "${CYAN}╭─────────────────────────────────────╮${NC}"
    echo -e "${CYAN}│${NC}       ${MAGENTA}Tools Management${NC}          ${CYAN}│${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────╯${NC}"
    echo
    
    echo -e "${WHITE}Launching Tools Management Interface...${NC}"
    echo
    
    # Change to tools directory and run manage.sh
    cd "$TOOLS_DIR" && ./manage.sh
    
    echo
    echo -e "${WHITE}Tools Management completed.${NC}"
    echo -ne "${YELLOW}Press any key to continue...${NC}"
    read -n 1 -s
    echo
}

# Show git & repository submenu
show_git_repository() {
    clear
    echo -e "${CYAN}╭─────────────────────────────────────╮${NC}"
    echo -e "${CYAN}│${NC}       ${MAGENTA}Git & Repository${NC}          ${CYAN}│${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────╯${NC}"
    echo
    
    local counter=1
    local git_tools=("attach-existing-repo" "init-new-repo" "git-status-overview" "github-stats")
    local bin_shown=false
    local scripts_shown=false
    
    for tool in "${git_tools[@]}"; do
        # Find tool and check if it's in bin/ or scripts/
        for i in "${!MENU_NAMES[@]}"; do
            if [[ "${MENU_NAMES[i]}" == "$tool" ]]; then
                local file="${MENU_COMMANDS[i]}"
                local description="${MENU_DESCRIPTIONS[i]}"
                
                # Show appropriate header
                if [[ "$file" == "$BIN_DIR"/* && "$bin_shown" == false ]]; then
                    echo -e "${CYAN}── 📦 EXECUTABLES (bin/) ──${NC}"
                    echo
                    bin_shown=true
                elif [[ "$file" != "$BIN_DIR"/* && "$scripts_shown" == false && "$bin_shown" == true ]]; then
                    echo
                    echo -e "${CYAN}── 📜 SCRIPTS (scripts/) ──${NC}"
                    echo
                    scripts_shown=true
                elif [[ "$file" != "$BIN_DIR"/* && "$scripts_shown" == false ]]; then
                    echo -e "${CYAN}── 📜 SCRIPTS (scripts/) ──${NC}"
                    echo
                    scripts_shown=true
                fi
                
                echo -e "${YELLOW}$counter)${NC} ${GREEN}$tool${NC}"
                echo -e "   ${WHITE}$description${NC}"
                echo
                ((counter++))
                break
            fi
        done
    done
    
    echo -e "${WHITE}Press ESC to go back${NC}"
    echo
}

# Show assistant configuration submenu
show_assistant_config() {
    clear
    echo -e "${CYAN}╭─────────────────────────────────────╮${NC}"
    echo -e "${CYAN}│${NC}    ${MAGENTA}Assistant Configuration${NC}     ${CYAN}│${NC}"
    echo -e "${CYAN}╰─────────────────────────────────────╯${NC}"
    echo
    
    local counter=1
    local assistant_tools=("sync-assistants-configs-to-global" "clean-global-assistants-configs" "configure-cc-glm" "create-assistant-command" "sync-assistant-commands" "save-current-claude-plugins")
    local bin_shown=false
    local scripts_shown=false
    
    for tool in "${assistant_tools[@]}"; do
        # Find tool and check if it's in bin/ or scripts/
        for i in "${!MENU_NAMES[@]}"; do
            if [[ "${MENU_NAMES[i]}" == "$tool" ]]; then
                local file="${MENU_COMMANDS[i]}"
                local description="${MENU_DESCRIPTIONS[i]}"
                
                # Show appropriate header
                if [[ "$file" == "$BIN_DIR"/* && "$bin_shown" == false ]]; then
                    echo -e "${CYAN}── 📦 EXECUTABLES (bin/) ──${NC}"
                    echo
                    bin_shown=true
                elif [[ "$file" != "$BIN_DIR"/* && "$scripts_shown" == false && "$bin_shown" == true ]]; then
                    echo
                    echo -e "${CYAN}── 📜 SCRIPTS (scripts/) ──${NC}"
                    echo
                    scripts_shown=true
                elif [[ "$file" != "$BIN_DIR"/* && "$scripts_shown" == false ]]; then
                    echo -e "${CYAN}── 📜 SCRIPTS (scripts/) ──${NC}"
                    echo
                    scripts_shown=true
                fi
                
                echo -e "${YELLOW}$counter)${NC} ${GREEN}$tool${NC}"
                echo -e "   ${WHITE}$description${NC}"
                echo
                ((counter++))
                break
            fi
        done
    done
    
    echo -e "${WHITE}Press ESC to go back${NC}"
    echo
}

# Show all tools using gum choose with filter
show_all_tools() {
    local options=()
    local tool_commands=()
    local tool_names=()
    
    # Build options with proper formatting showing bin/scripts sections
    local in_bin_section=true
    local bin_header_added=false
    local scripts_header_added=false
    
    for i in "${!MENU_COMMANDS[@]}"; do
        local file="${MENU_COMMANDS[i]}"
        local name="${MENU_NAMES[i]}"
        local description="${MENU_DESCRIPTIONS[i]}"
        
        # Check if we're in bin/ or scripts/ and add headers as needed
        if [[ "$file" == "$BIN_DIR"/* ]]; then
            if [[ "$bin_header_added" == false ]]; then
                options+=("── 📦 EXECUTABLES (bin/) ──")
                tool_commands+=("")
                tool_names+=("")
                bin_header_added=true
            fi
        else
            if [[ "$in_bin_section" == true ]]; then
                in_bin_section=false
            fi
            if [[ "$scripts_header_added" == false ]]; then
                options+=("── 📜 SCRIPTS (scripts/) ──")
                tool_commands+=("")
                tool_names+=("")
                scripts_header_added=true
            fi
        fi
        
        # Add the actual tool
        options+=("$name - $description")
        tool_commands+=("$file")
        tool_names+=("$name")
    done
    
    # Use gum choose with filter
    local choice=$(printf '%s\n' "${options[@]}" | gum choose \
        --header "🔍 Search and select a tool to run:" \
        --cursor-prefix "→ " \
        --selected-prefix "✓ " \
        --unselected-prefix "  " \
        --cursor.foreground="3" \
        --header.foreground="5" \
        --item.foreground="7" \
        --selected.foreground="2" \
        --height 25)
    
    if [[ -z "$choice" ]]; then
        echo -e "${YELLOW}No selection made, returning to main menu...${NC}"
        return 0
    fi
    
    # Skip header lines
    if [[ "$choice" == "──"* ]]; then
        echo -e "${YELLOW}Please select an actual tool, not a header.${NC}"
        sleep 1
        show_all_tools  # Recursive call to try again
        return $?
    fi
    
    # Find and execute the selected tool
    for i in "${!options[@]}"; do
        if [[ "${options[i]}" == "$choice" ]]; then
            local command="${tool_commands[i]}"
            local tool_name="${tool_names[i]}"
            
            if [[ -n "$command" ]]; then
                echo
                echo -e "${MAGENTA}Running: ${GREEN}$tool_name${NC}"
                echo -e "${WHITE}Command: $command${NC}"
                echo
                
                echo -e "${GREEN}Executing...${NC}"
                echo "────────────────────────────────────────"
                
                $command
                
                echo
                echo "────────────────────────────────────────"
                echo -e "${WHITE}Command completed.${NC}"
                echo
                
                echo -ne "${YELLOW}Press any key to continue...${NC}"
                read -n 1 -s
                echo
                return 0
            fi
            break
        fi
    done
    
    echo -e "${RED}Error: Could not execute selected tool${NC}"
    return 1
}

# Get user selection
get_selection() {
    local choice
    echo -ne "${YELLOW}Enter choice: ${NC}"
    read -n 1 -s choice
    echo
    
    # Check for ESC key (ASCII 27)
    if [[ $(printf '%d' "'$choice") -eq 27 ]] 2>/dev/null; then
        SELECTED_CHOICE="ESC"
    else
        SELECTED_CHOICE="$choice"
    fi
    return 0
}

# Execute tool by name
execute_tool() {
    local tool_name="$1"
    
    # Find the command for this tool
    for i in "${!MENU_NAMES[@]}"; do
        if [[ "${MENU_NAMES[i]}" == "$tool_name" ]]; then
            local command="${MENU_COMMANDS[i]}"
            
            echo
            echo -e "${MAGENTA}Running: ${GREEN}$tool_name${NC}"
            echo -e "${WHITE}Command: $command${NC}"
            echo
            
            echo -e "${GREEN}Executing...${NC}"
            echo "────────────────────────────────────────"
            
            $command
            
            echo
            echo "────────────────────────────────────────"
            echo -e "${WHITE}Command completed.${NC}"
            echo
            
            return 0
        fi
    done
    
    echo -e "${RED}Tool not found: $tool_name${NC}"
    return 1
}

# Main function
main() {
    # Build the menu data first
    build_menu_data
    
    if [[ $TOTAL_ITEMS -eq 0 ]]; then
        echo -e "${RED}No tools found in bin/ or scripts/ directories${NC}"
        exit 1
    fi
    
    local current_menu="main"
    
    while true; do
        case "$current_menu" in
            "main")
                display_menu
                get_selection
                case "$SELECTED_CHOICE" in
                    1) current_menu="assistant" ;;
                    2) current_menu="git" ;;
                    3) current_menu="tools" ;;
                    4) current_menu="all" ;;
                    ESC) echo -e "${WHITE}Goodbye!${NC}"; exit 0 ;;
                    *) echo -e "${RED}Invalid choice${NC}"; sleep 1 ;;
                esac
                ;;
            "tools")
                show_tools_management
                current_menu="main"  # Return to main after tools management
                ;;
            "git")
                show_git_repository
                get_selection
                case "$SELECTED_CHOICE" in
                    1) execute_tool "attach-existing-repo" ;;
                    2) execute_tool "init-new-repo" ;;
                    3) execute_tool "git-status-overview" ;;
                    4) execute_tool "github-stats" ;;
                    ESC) current_menu="main" ;;
                    *) echo -e "${RED}Invalid choice${NC}"; sleep 1 ;;
                esac
                if [[ "$SELECTED_CHOICE" =~ ^[1-4]$ ]]; then
                    echo -ne "${YELLOW}Press any key to continue...${NC}"
                    read -n 1 -s
                    echo
                fi
                ;;
            "assistant")
                show_assistant_config
                get_selection
                case "$SELECTED_CHOICE" in
                    1) execute_tool "sync-assistants-configs-to-global" ;;
                    2) execute_tool "clean-global-assistants-configs" ;;
                    3) execute_tool "configure-cc-glm" ;;
                    4) execute_tool "create-assistant-command" ;;
                    5) execute_tool "sync-assistant-commands" ;;
                    6) execute_tool "save-current-claude-plugins" ;;
                    ESC) current_menu="main" ;;
                    *) echo -e "${RED}Invalid choice${NC}"; sleep 1 ;;
                esac
                if [[ "$SELECTED_CHOICE" =~ ^[1-6]$ ]]; then
                    echo -ne "${YELLOW}Press any key to continue...${NC}"
                    read -n 1 -s
                    echo
                fi
                ;;
            "all")
                show_all_tools
                current_menu="main"  # Return to main menu after tool selection
                ;;
        esac
    done
}

main